#ifndef MAIN_H_
#define MAIN_H_

#include <stdbool.h>
#include <stdint.h>

#include "lwip/tcp.h"
#include "lwip/err.h"

#include "images.h"
#include "imageProcess.h"

#define MAX_DATA_SEND 8192
#define EXPECTED_SIZE IMAGE_SIZE

void resetDMA(XAxiDma *dmaInstance);
int initIntrController(XScuGic *Intc);
static void ReadErrorCallBack(void *CallbackRef, u32 Mask);
static void ReadCallBack(void *CallbackRef, u32 Mask);
static int SetupVideoIntrSystem(XAxiVdma *AxiVdmaPtr, u16 ReadIntrId, XScuGic *Intc);
void resetAndStartProcessing(imgProcess *imgProcessInstance,XGpio *gpioReset, char *imageData);
void print_app_header();
int start_application();
int transfer_data();
void tcp_fasttmr(void);
void tcp_slowtmr(void);
void lwip_init();

enum ProcessState {
    INIT_PROCESS,
    WAIT_AFTER_START_FIRST,
    DRAW_FIRST_IMAGE,
    WAIT_FIRST_IMAGE,
    DRAW_FIRST_FILTERED_IMAGE,
    WAIT_FIRST_FILTERED_IMAGE,
    PROCESS_SECOND_IMAGE,
    WAIT_AFTER_START_SECOND,
    DRAW_SECOND_IMAGE,
    WAIT_SECOND_IMAGE,
    DRAW_SECOND_FILTERED_IMAGE,
    WAIT_SECOND_FILTERED_IMAGE,
    RESET_PROCESS,
    WAIT_AFTER_RESET
};

char data_send[MAX_DATA_SEND];
char data_buffer[EXPECTED_SIZE];
unsigned int received_bytes = 0;
unsigned int send_index = 0;
bool receiving = false;
struct tcp_pcb *global_tpcb;
XGpio rdLineCounterGpio;
XGpio totalPixelCounterGpio;
XGpio auxResetGpio;
u32 rdLineCounterValue;
u32 totalPixelCounterValue;
char Buffer[FRAME_SIZE];
extern volatile int TcpFastTmrFlag;
extern volatile int TcpSlowTmrFlag;
static struct netif server_netif;
struct netif *echo_netif;

#endif
